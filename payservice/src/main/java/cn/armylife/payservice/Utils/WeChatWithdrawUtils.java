package cn.armylife.payservice.Utils;import cn.armylife.payservice.Domain.WeChatUsers;import org.apache.commons.io.IOUtils;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.client.HttpClient;import org.apache.http.client.config.RequestConfig;import org.apache.http.client.methods.HttpPost;import org.apache.http.config.RegistryBuilder;import org.apache.http.conn.socket.ConnectionSocketFactory;import org.apache.http.conn.socket.PlainConnectionSocketFactory;import org.apache.http.conn.ssl.SSLConnectionSocketFactory;import org.apache.http.entity.StringEntity;import org.apache.http.impl.client.HttpClientBuilder;import org.apache.http.impl.conn.BasicHttpClientConnectionManager;import org.apache.http.util.EntityUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import javax.net.ssl.KeyManagerFactory;import javax.net.ssl.SSLContext;import java.io.ByteArrayInputStream;import java.io.InputStream;import java.security.KeyStore;import java.security.SecureRandom;import java.util.HashMap;import java.util.Map;@Servicepublic class WeChatWithdrawUtils {    private static final Logger log = LoggerFactory.getLogger(WeChatWithdrawUtils.class.getName());    private byte[] certData;    /**     * 加载证书     *///    public  InputStream getCertStream() {//        ByteArrayInputStream certBis;//        certBis = new ByteArrayInputStream(this.certData);//        return certBis;//    }    public InputStream getCertStream() {        try {            InputStream certStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("apiclient_cert.p12");            this.certData = IOUtils.toByteArray(certStream);            certStream.close();        } catch (Exception e) {            e.printStackTrace();        }        ByteArrayInputStream certBis = new ByteArrayInputStream(this.certData);        return certBis;    }    /**     *读取证书     *///    public WeChatWithdrawUtils() throws Exception{////        WeChatUsers weChatUsers=new WeChatUsers();////        String certPath = weChatUsers.SSLCERT_PATH;////        Resource resource = new ClassPathResource("/apiclient_cert.p12");//"apiclient_cert.p12";//从微信商户平台下载的安全证书存放的目录//        ClassPathResource cp = new ClassPathResource("apiclient_cert.p12");//        // String certPath="E:\\javaPicture\\yezz\\apiclient_cert.p12";//        File file = cp.getFile();////        File file = new File(certPath);//        InputStream certStream = new FileInputStream(file);//        this.certData = new byte[(int) file.length()];//        certStream.read(this.certData);//        certStream.close();//    }    @Autowired    WeChatUsers weChatUsers;    /**     *     * 提现     * 请求，只请求一次，不做重试     * @param connectTimeoutMs     * @param readTimeoutMs     * @return     * @throws Exception     */    public String withdrawRequestOnce(Map<String, String> params, int connectTimeoutMs, int readTimeoutMs, boolean useCert) throws Exception {        /**1.拼凑企业支付需要的参数**/        Map<String, String> paraMap = new HashMap<>();        paraMap.putAll(params);        //微信公众号的appid        paraMap.put("mch_appid", weChatUsers.getAppId());        //商户号        paraMap.put("mchid",weChatUsers.getMCHID());        //随机字符串        //paraMap.put("nonce_str", OtherUtils.getNonceStr());        paraMap.get("nonce_str");        //订单号        //paraMap.put("partner_trade_no","qianchen"+System.currentTimeMillis());        paraMap.get("partner_trade_no");        //openid        //paraMap.put("openid",params.getOrDefault("openId","oelSW0uBU233H5YM3dweIZ08kauk"));//"o5mZ40yBjIqco2NzKc19k9oIBI9o");        paraMap.get("openid");        // 校验用户姓名选项 NO_CHECK：不校验真实姓名  FORCE_CHECK：强校验真实姓名        paraMap.put("check_name","NO_CHECK");        //paraMap.put("amount",params.getOrDefault("money","0"));//"100");        paraMap.get("amount");        //企业付款操作说明信息。必填。        //paraMap.put("desc",params.getOrDefault("clientId","")+"用户提现");        paraMap.get("desc");        //ip地址，地址可以不是真实地址        paraMap.put("spbill_create_ip",params.getOrDefault("spbillCreateIp","127.0.01"));        /**2.Unicode码从小到大排序**/        String url = OtherUtils.formatUrlMap(paraMap, false, false);        url = url + "&key=" + weChatUsers.getKEY();        /**3.用MD5加密生成签名**/        String sign = WXPayUtil.MD5(url).toUpperCase();        /**4.将map拼接成xml格式**/        StringBuffer xml = new StringBuffer();        xml.append("<xml>");        for (Map.Entry<String, String> entry : paraMap.entrySet()) {            xml.append("<" + entry.getKey() + ">");            xml.append(entry.getValue());            xml.append("</" + entry.getKey() + ">" + "\n");        }        xml.append("<sign>");        xml.append(sign);        xml.append("</sign>");        xml.append("</xml>");        log.info("xml {} ", xml.toString());        BasicHttpClientConnectionManager connManager;        /**5.操作证书**/        if (useCert) {            // 证书            System.out.println(weChatUsers.getAppId());            System.out.println(weChatUsers.getCallBackSlientUrl());            System.out.println(weChatUsers.getMCHID());            System.out.println(weChatUsers.getKEY());            char[] password = weChatUsers.getMCHID().toCharArray();            System.out.println(password);            InputStream certStream =  new WeChatWithdrawUtils().getCertStream();            KeyStore ks = KeyStore.getInstance("PKCS12");            ks.load(certStream, password);            // 实例化密钥库 & 初始化密钥工厂            KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());            kmf.init(ks, password);            // 创建 SSLContext            SSLContext sslContext = SSLContext.getInstance("TLS");            sslContext.init(kmf.getKeyManagers(), null, new SecureRandom());            SSLConnectionSocketFactory sslConnectionSocketFactory = new SSLConnectionSocketFactory(                    sslContext,                    new String[]{"TLSv1"},                    null,                    new org.apache.http.conn.ssl.DefaultHostnameVerifier());            connManager = new BasicHttpClientConnectionManager(                    RegistryBuilder.<ConnectionSocketFactory>create()                            .register("http", PlainConnectionSocketFactory.getSocketFactory())                            .register("https", sslConnectionSocketFactory)                            .build(),                    null,                    null,                    null            );        }        else {            connManager = new BasicHttpClientConnectionManager(                    RegistryBuilder.<ConnectionSocketFactory>create()                            .register("http", PlainConnectionSocketFactory.getSocketFactory())                            .register("https", SSLConnectionSocketFactory.getSocketFactory())                            .build(),                    null,                    null,                    null            );        }        HttpClient httpClient = HttpClientBuilder.create()                .setConnectionManager(connManager)                .build();        /**发送信息到微信服务器**/        HttpPost httpPost = new HttpPost("https://api.mch.weixin.qq.com/mmpaymkttransfers/promotion/transfers");        /**设置超时时间**/        RequestConfig requestConfig = RequestConfig.custom().setSocketTimeout(readTimeoutMs).setConnectTimeout(connectTimeoutMs).build();        httpPost.setConfig(requestConfig);        StringEntity postEntity = new StringEntity(xml.toString(), "UTF-8");        httpPost.addHeader("Content-Type", "text/xml");        httpPost.addHeader("User-Agent", "wxpay sdk java v1.0 " + weChatUsers.getMCHID());  // TODO: 很重要，用来检测 sdk 的使用情况，要不要加上商户信息？        httpPost.setEntity(postEntity);        /**发送后返回支付结果，xml格式**/        HttpResponse httpResponse = httpClient.execute(httpPost);        HttpEntity httpEntity = httpResponse.getEntity();        return EntityUtils.toString(httpEntity, "UTF-8");    }}